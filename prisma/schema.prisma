// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId   String  @id @unique
  userName  String  @default("")
  email     String  @unique
  firstName String
  lastName  String
  photo     String  @default("")
  verified  Boolean @default(false)
  order     Order[]

  @@index([email])
}

model Order {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [createdBy], references: [clerkId])
  createdBy     String
  totalAmount   Float         @default(0)
  status        OrderStatus   @default(DRAFT)
  paymentStatus PaymentStatus @default(AWAITING_PAYMENT)
  pickupTime    DateTime
  cartItems     OrderItems[]  @relation("OrderItems")
  customer      Customer      @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId    String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([createdBy])
}

model OrderItems {
  id        String   @id @default(uuid())
  items     Item     @relation("cartItems", fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String
  quanity   Int      @default(1)
  order     Order    @relation("OrderItems", fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id          String       @id @default(uuid())
  name        String
  description String?
  images     String
  dietary     Dietary[]
  category    Category     @relation("CategoryItems", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId  String
  cart        OrderItems[] @relation("cartItems")
  sizes       ItemSize[]

  @@index([id])
}

model Size {
  name  SizeEnum   @unique
  items ItemSize[]

  @@id([name])
}

model ItemSize {
  id     String   @id @default(uuid())
  item   Item     @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId String
  size   Size     @relation(fields: [sizeId], references: [name])
  sizeId SizeEnum
  price  Float

  @@unique([itemId, sizeId])
}

model Category {
  id    String     @id @default(uuid())
  name  Categories
  items Item[]     @relation("CategoryItems")

  @@index([name])
}

model Customer {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String?  @unique
  phone     String
  address   String?
  city      String?
  state     String?
  postCode  String?
  country   String?  @default("Australia")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]  @relation("CustomerOrders")

  @@index([email])
}

enum Categories {
  CHICKEN
  SALAD
  SIDES
  SHARING_BOXES
  DESSERTS
  DRINKS
  SAUCES
  FINGER_FOOD
}

enum Dietary {
  VEGAN
  VEGETARIAN
  GLUTEN_FREE
  DAIRY_FREE
  NUT_FREE
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  READY
  DISPATCHED
  DELIVERED
  AWAITING_PICKUP
  COMPLETED
}

enum SizeEnum {
  REGULAR
  LARGE
  FAMILY
  EXTRA_LARGE
  SMALL
  MEDIUM
}

enum PaymentStatus {
  AWAITING_PAYMENT
  REFUNDED
  DECLINED
  PAYMENT_COMPLETED
}
